<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>TV and Video Scheduler</title>
<script type="text/javascript" src="https://www.youtube.com/iframe_api"></script>
<style>
  body {
    font-family: 'Arial', sans-serif;
    background: #23113a;

    color: white;
    margin: 0;
    padding: 20px;
  }

  #channelsGrid {
    display: flex;
    flex-direction: column;
    gap: 1px; 
    width: 100%; 
    min-height: 100px; /* Minimum height */
    
    padding: 10px;
  }

  .channel-content {
    display: flex;
    align-items: center; /* Align items vertically */
    width: 100%;
    height: 58px;
}



  .channel-name {
    margin-top: 13px;
    background-color: #000000; 
    font-size: 18px;
    height: 30px;
    font-weight: bold;
    border-radius: 5px;
    padding: 15px;
    margin-bottom: 1px; 
    width: 100px;
}


  .channel-schedule {  
    display: flex;
    flex-wrap: wrap;
    height: 50px;
    gap: 1px;
    padding: 10px;
    border-radius: 5px;
    margin-bottom: 1px; /* Space between schedule blocks */
    padding: 5px; 
}

.schedule-item {
    background-color: #7b7596; 
    padding: 14px;
    margin: 1px;
    border-radius: 5px;
    
}

.schedule-title {
    font-weight: bold;
    
}

.schedule-time {
    font-size: smaller;
    color: #ddd; 

}


  .channel-block {
    padding: 1px;
    border-radius: 5px;
    margin-bottom: 1px; /* Space between channel blocks */
}


  #videoContainer {
    position: relative;
    width: 100%;
    max-width: 560px; /* Responsive video width */
    margin: auto;
    height: 315px;
  }

  #videoPlayer {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .video-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
    pointer-events: auto;
    background-color: transparent; 
  }

  /* .pip-button {
    position: absolute;
    top: 10px;
    left: 10px;
    background-color: #000;
    color: #fff;
    padding: 10px;
    border: none;
    cursor: pointer;
    z-index: 3;
  } */

  .mute-toggle {
    margin: 15px;
    padding: 10px;
    cursor: pointer;
    background-color: #222;
    color: white;
    border-radius: 5px;
    border: none;
    display: block; /* Center the button */
    width: 200px; /* Set a fixed width for the button */
    margin-left: auto;
    margin-right: auto;
  }
</style>
</head>
<body>

    
<div id="videoContainer">
    <div id="videoPlayer">
    </div>
    <div class="video-overlay" onclick="testOverlay()"></div>
    <!-- <button class="pip-button" onclick="togglePiP()">PiP</button> -->
</div>



<div id="channelsGrid">

</div>
  


<button class="mute-toggle" onclick="toggleMute()">Mute/Unmute</button>

<script>
    var player;
    var scheduledStartTime;
    var scheduledEndTime;
    var checkForVideoInterval;
    var selectedChannelId;

    // async function fetchChannels() {
    //     try {
    //         const response = await fetch('http://localhost:3003/channels');
    //         const channels = await response.json();
    //         const grid = document.getElementById('channelsGrid');
    //         grid.innerHTML = ''; // Clear the grid before adding new channels

    //         channels.forEach(channel => {
    //             const block = document.createElement('div');
    //             block.className = 'channel-block';
    //             block.textContent = channel.name;
    //             block.onclick = function() { 
    //                 selectChannel(channel.channel_id); // This triggers the video change
    //             };
    //             grid.appendChild(block);
    //         });
    //     } catch (error) {
    //         console.error("Error fetching channels:", error);
    //     }
    // }


    async function fetchChannels() {
        try {
            const response = await fetch('http://localhost:3003/channels'); // Adjust URL as needed
            const channels = await response.json();
            const grid = document.getElementById('channelsGrid');
            grid.innerHTML = ''; // Clear the grid before adding new channels

            for (const channel of channels) {
                const channelBlock = document.createElement('div');
                channelBlock.className = 'channel-block';
                channelBlock.onclick = function() { 
                    selectChannel(channel.channel_id); // This triggers the video change
                };


                // Channel Content container
                const channelContent = document.createElement('div');
                channelContent.className = 'channel-content';


                // Channel Name
                const channelName = document.createElement('div');
                channelName.className = 'channel-name';
                channelName.textContent = channel.name;
                channelContent.appendChild(channelName);

                // Channel Schedule
                const schedule = await fetchScheduleForChannel(channel.channel_id); 
                //console.log('Schedule for channel', channel.channel_id, schedule);
                const scheduleBlock = createScheduleBlock(schedule); 
                channelContent.appendChild(scheduleBlock);

                channelBlock.appendChild(channelContent);

                grid.appendChild(channelBlock);
            }
        } catch (error) {
            console.error("Error fetching channels:", error);
        }
    }

    async function fetchScheduleForChannel(channelId) {
        try {
            const response = await fetch(`http://localhost:3003/schedules?channelId=${channelId}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const schedule = await response.json();
            return schedule;
        } catch (error) {
            console.error("Error fetching schedule:", error);
            return []; // Return an empty array in case of error
        }
    }

    // function createScheduleBlock(schedule) {
    //     const scheduleBlock = document.createElement('div');
    //     scheduleBlock.className = 'channel-schedule';

    //     schedule.forEach(item => {
    //         //console.log('Adding schedule item:', item);
    //         const itemDiv = document.createElement('div');
    //         itemDiv.className = 'schedule-item';
    //         itemDiv.textContent = `${item.title}: ${item.start_time} - ${item.end_time}`;
    //         scheduleBlock.appendChild(itemDiv);
    //     });

    //     return scheduleBlock;
    // }


    function createScheduleBlock(schedule) {
        const scheduleBlock = document.createElement('div');
        scheduleBlock.className = 'channel-schedule';

        schedule.forEach(item => {
            const itemDiv = document.createElement('div');
            itemDiv.className = 'schedule-item';

            // Create a div for the title
            const titleDiv = document.createElement('div');
            titleDiv.className = 'schedule-title';
            titleDiv.textContent = item.title;
            itemDiv.appendChild(titleDiv);

            // Create a div for the time
            const timeDiv = document.createElement('div');
            timeDiv.className = 'schedule-time';
            timeDiv.textContent = `${item.start_time} - ${item.end_time}`;
            itemDiv.appendChild(timeDiv);

            scheduleBlock.appendChild(itemDiv);
        });

        return scheduleBlock;
    }



    function onYouTubeIframeAPIReady() {
        //checkForScheduledVideo();
        //loadVideo();
    }


    function selectChannel(channelId) {
        //console.log("Channel ID Selected:", channelId);
        selectedChannelId = channelId;
        clearInterval(checkForVideoInterval);
        checkForScheduledVideo(); // Make sure this is called with a valid channelId
    }




    function checkForScheduledVideo() {
        if (!selectedChannelId) {
            console.error('No channel selected');
            return;
        }
        const channelId = selectedChannelId;
        //document.getElementById('channelSelect').value;
        //console.log("Channel ID Selected:", channelId);
        
        checkForVideoInterval = setInterval(function() {

            console.log("Entered setInterval");
            //console.log("Checking for scheduled video at", new Date().toLocaleTimeString());
            fetch('http://localhost:3003/videos', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ channelId: channelId })
            })
            
                .then(response => response.json())
                .then(data => {
                    console.log("Data from server:", data);
                    scheduledStartTime = convertToFullDateTime(data.startTime);
                    const currentTime = new Date();

                    console.log("Current Time:", currentTime, "Scheduled Start Time:", scheduledStartTime);
                    
                    if (currentTime.getTime() >= scheduledStartTime.getTime()) {
                        clearInterval(checkForVideoInterval);
                        loadVideo(channelId);
                        //window.location.reload();
                    }
                })
                .catch(error => {
                    console.error("Error fetching video data:", error);
                });
        }, 1000);
    }


    function loadVideo(channelId) {
        fetch('http://localhost:3003/videos', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ channelId: channelId })
        })
        .then(response => response.json())
        .then(data => {
            //scheduledStartTime = convertToFullDateTime(data.startTime);
            scheduledEndTime = convertToFullDateTime(data.endTime);

            if (!player) {
                // Initialize the player only if it doesn't exist
                player = new YT.Player('videoPlayer', {
                    videoId: extractVideoID(data.embedUrl),
                    playerVars: {
                        controls: 0,
                        autoplay: 1,
                        mute: 1,
                        start: extractStartTime(data.embedUrl),
                        disablekb: 1,
                        modestbranding: 1
                    },
                    events: {
                        'onReady': onPlayerReady,
                        'onStateChange': onPlayerStateChange
                    }
                });
            } else {
                // If the player exists, just load the new video
                player.loadVideoById({
                    videoId: extractVideoID(data.embedUrl),
                    startSeconds: extractStartTime(data.embedUrl)
                });
            }
        })
        .catch(error => {
            console.error("Error fetching video data:", error);
        });
    }



    function convertToFullDateTime(endTime) {
        const currentTime = new Date();
        const [hours, minutes, seconds] = endTime.split(':').map(Number);
        return new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate(), hours, minutes, seconds);
    }


    function onPlayerReady(event) {
        event.target.playVideo();
    }


    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.ENDED) {
            console.log("Video ended. Loading next scheduled video if available.");
            // Logic to load the next video or do nothing if no video is scheduled
            checkForScheduledVideo();
        }
    }

    

    function extractVideoID(url) {
        const regex = /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|\S*?[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]{11})/;
        return (url.match(regex)) ? RegExp.$1 : null;
    }

    function extractStartTime(url) {
        const regex = /[?&]start=(\d+)/;
        return (url.match(regex)) ? RegExp.$1 : 0;
    }

    function toggleMute() {
        if (player && player.isMuted()) {
            player.unMute();
        } else {
            player.mute();
        }
    }

    function togglePiP() {
        const video = document.querySelector('#videoPlayer iframe');
        if (video && video.requestPictureInPicture) {
            video.requestPictureInPicture().catch(error => {
                console.error("PiP Error:", error);
            });
        }
    }

    document.addEventListener('DOMContentLoaded', fetchChannels);
</script>

</body>
</html>


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Scheduler</title>
    <script type="text/javascript" src="https://www.youtube.com/iframe_api"></script>
    <style>
        #videoContainer {
            position: relative;
            width: 560px;
            height: 315px;
        }
        #videoPlayer {
            position: relative;
            width: 100%;
            height: 100%;
        }

        #channelsGrid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); /* Adjust the size as needed */
            gap: 10px;
            padding: 10px;
        }

        .channel-block {
            background-color: #444;
            color: #fff;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            transition: transform 0.2s ease;
        }

        .channel-block:hover {
            transform: scale(1.05);
            background-color: #555;
        }

        .video-overlay {
            
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2;
            pointer-events: auto;
            background-color: transparent; 
        }
        .pip-button {
            position: absolute;
            top: 10px;
            left: 10px;
            background-color: #000;
            color: #fff;
            padding: 10px;
            border: none;
            cursor: pointer;
            z-index: 3;
        }
        .mute-toggle {
            margin: 15px;
            padding: 10px;
            cursor: pointer;
        }
    </style>
</head>
<body>


    
<div id="videoContainer">
    <div id="videoPlayer">

    </div>
    <div class="video-overlay" onclick="testOverlay()"></div>
    <button class="pip-button" onclick="togglePiP()">PiP</button>
</div>


<div id="channelsGrid"></div>



<button class="mute-toggle" onclick="toggleMute()">Mute/Unmute</button>

<script>
    var player;
    var scheduledStartTime;
    var scheduledEndTime;
    var checkForVideoInterval;
    var selectedChannelId;

    async function fetchChannels() {
        try {
            const response = await fetch('http://localhost:3003/channels');
            const channels = await response.json();
            const grid = document.getElementById('channelsGrid');
            grid.innerHTML = ''; // Clear the grid before adding new channels

            channels.forEach(channel => {
                const block = document.createElement('div');
                block.className = 'channel-block';
                block.textContent = channel.name;
                block.onclick = function() { 
                    selectChannel(channel.channel_id); // This triggers the video change
                };
                grid.appendChild(block);
            });
        } catch (error) {
            console.error("Error fetching channels:", error);
        }
    }


    function onYouTubeIframeAPIReady() {
        //checkForScheduledVideo();
        //loadVideo();
    }


    function selectChannel(channelId) {
        //console.log("Channel ID Selected:", channelId);
        selectedChannelId = channelId;
        clearInterval(checkForVideoInterval);
        checkForScheduledVideo(); // Make sure this is called with a valid channelId
    }


    // function onChannelChange() {
    //     selectedChannelId = document.getElementById('channelSelect').value;
    //     clearInterval(checkForVideoInterval);
    //     checkForScheduledVideo(); // Make sure this is called with a valid channelId
    // }


    function checkForScheduledVideo() {
        if (!selectedChannelId) {
            console.error('No channel selected');
            return;
        }
        const channelId = selectedChannelId;
        //document.getElementById('channelSelect').value;
        //console.log("Channel ID Selected:", channelId);
        
        checkForVideoInterval = setInterval(function() {

            console.log("Entered setInterval");
            //console.log("Checking for scheduled video at", new Date().toLocaleTimeString());
            fetch('http://localhost:3003/videos', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ channelId: channelId })
            })
            
                .then(response => response.json())
                .then(data => {
                    console.log("Data from server:", data);
                    scheduledStartTime = convertToFullDateTime(data.startTime);
                    const currentTime = new Date();

                    console.log("Current Time:", currentTime, "Scheduled Start Time:", scheduledStartTime);
                    
                    if (currentTime.getTime() >= scheduledStartTime.getTime()) {
                        clearInterval(checkForVideoInterval);
                        loadVideo(channelId);
                        //window.location.reload();
                    }
                })
                .catch(error => {
                    console.error("Error fetching video data:", error);
                });
        }, 1000);
    }

    // function loadVideo(channelId) {
    //     //window.location.reload();
    //     fetch('http://localhost:3003/videos', {
    //         method: 'POST',
    //         headers: {
    //             'Content-Type': 'application/json'
    //         },
    //         body: JSON.stringify({ channelId: channelId })
    //     })
    //         .then(response => response.json())
    //         .then(data => {
               
    //             //scheduledStartTime = convertToFullDateTime(data.startTime);
    //             scheduledEndTime = convertToFullDateTime(data.endTime);

    //             if (!player) {
    //                 // Initialize the player only if it doesn't exist
    //                 player = new YT.Player('videoPlayer', {
    //                     videoId: extractVideoID(data.embedUrl),
    //                     playerVars: {
    //                         controls: 0,
    //                         autoplay: 1,
    //                         mute: 1,
    //                         start: extractStartTime(data.embedUrl),
    //                         disablekb: 1,
    //                         modestbranding: 1
    //                     },
    //                     events: {
    //                         'onReady': onPlayerReady,
    //                         'onStateChange': onPlayerStateChange
    //                     }
    //                 });
    //             } else {
    //                 // If the player exists, just load the new video
    //                 player.loadVideoById({
    //                     videoId: extractVideoID(data.embedUrl),
    //                     startSeconds: extractStartTime(data.embedUrl)
    //                 });
    //             }
    //         })
    //         .catch(error => {
    //             console.error("Error fetching video data:", error);
    //         });
    // }


    function loadVideo(channelId) {
        fetch('http://localhost:3003/videos', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ channelId: channelId })
        })
        .then(response => response.json())
        .then(data => {
            //scheduledStartTime = convertToFullDateTime(data.startTime);
            scheduledEndTime = convertToFullDateTime(data.endTime);

            if (!player) {
                // Initialize the player only if it doesn't exist
                player = new YT.Player('videoPlayer', {
                    videoId: extractVideoID(data.embedUrl),
                    playerVars: {
                        controls: 0,
                        autoplay: 1,
                        mute: 1,
                        start: extractStartTime(data.embedUrl),
                        disablekb: 1,
                        modestbranding: 1
                    },
                    events: {
                        'onReady': onPlayerReady,
                        'onStateChange': onPlayerStateChange
                    }
                });
            } else {
                // If the player exists, just load the new video
                player.loadVideoById({
                    videoId: extractVideoID(data.embedUrl),
                    startSeconds: extractStartTime(data.embedUrl)
                });
            }
        })
        .catch(error => {
            console.error("Error fetching video data:", error);
        });
    }



    function convertToFullDateTime(endTime) {
        const currentTime = new Date();
        const [hours, minutes, seconds] = endTime.split(':').map(Number);
        return new Date(currentTime.getFullYear(), currentTime.getMonth(), currentTime.getDate(), hours, minutes, seconds);
    }

    // function onChannelChange() {
    //     selectedChannelId = document.getElementById('channelSelect').value;
    //     clearInterval(checkForVideoInterval);
    //     loadVideo(selectedChannelId); // Pass the selectedChannelId
    // }


    function onPlayerReady(event) {
        event.target.playVideo();
    }

    // function onPlayerStateChange(event) {        
    //     var checkInterval = setInterval(function() {
    //         var currentTime = new Date();

    //         // Debugging logs
    //         // console.log("Current Time: ", currentTime);
    //         // console.log("Scheduled End Time: ", scheduledEndTime);

    //         if (currentTime.getTime() >= scheduledEndTime.getTime()) {
    //             clearInterval(checkInterval);
    //             loadVideo(selectedChannelId);
    //             window.location.reload();
    //         }
    //     }, 1000);
    // }

    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.ENDED) {
            console.log("Video ended. Loading next scheduled video if available.");
            // Logic to load the next video or do nothing if no video is scheduled
            checkForScheduledVideo();
        }
    }

    

    function extractVideoID(url) {
        const regex = /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v|e(?:mbed)?)\/|\S*?[?&]v=)|youtu\.be\/)([a-zA-Z0-9_-]{11})/;
        return (url.match(regex)) ? RegExp.$1 : null;
    }

    function extractStartTime(url) {
        const regex = /[?&]start=(\d+)/;
        return (url.match(regex)) ? RegExp.$1 : 0;
    }

    function toggleMute() {
        if (player && player.isMuted()) {
            player.unMute();
        } else {
            player.mute();
        }
    }

    function togglePiP() {
        const video = document.querySelector('#videoPlayer iframe');
        if (video && video.requestPictureInPicture) {
            video.requestPictureInPicture().catch(error => {
                console.error("PiP Error:", error);
            });
        }
    }

    document.addEventListener('DOMContentLoaded', fetchChannels);
</script>

</body>
</html>