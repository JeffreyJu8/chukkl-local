const express = require('express');
const mysql = require('mysql2/promise');
const moment = require('moment-timezone');

const PORT = process.env.PORT || 3003;
const DATABASE_CONFIG = {
    host: 'localhost',
    user: 'root',
    password: 'FCBarcelona1899', 
    database: 'h_h_database'
};

const app = express();
app.use(express.json());

let db;

async function connectToDatabase() {
    if (db) return;
    db = await mysql.createConnection(DATABASE_CONFIG);
    console.log("Connected to the database.");
}

app.get('/channels', async (req, res) => {
    const [channels] = await db.query('SELECT channel_id, name FROM Channels');
    res.json(channels);
});

app.post('/videos', async (req, res) => {
    const channelId = req.body.channelId;
    const currentTimeMoment = moment().tz('America/Los_Angeles');

    const query = `
        SELECT v.url, s.start_time, s.end_time 
        FROM Schedules s
        JOIN Videos v ON s.video_id = v.video_id
        WHERE s.channel_id = ?
        AND ? BETWEEN s.start_time AND s.end_time
        ORDER BY s.start_time`;

    try {
        const [videos] = await db.execute(query, [channelId, currentTimeMoment.format('HH:mm:ss')]);

        if (videos.length === 0) {
            return res.status(404).json({ message: 'No video is scheduled to play at this time.' });
        }

        const video = videos[0];
        const startTimeMoment = moment(video.start_time, 'HH:mm:ss');
        const offsetInSeconds = currentTimeMoment.diff(startTimeMoment, 'seconds');
        const baseUrl = video.url.split('?')[0];
        const autoPlayUrl = `${baseUrl}?autoplay=1&mute=1&start=${offsetInSeconds}`;

        res.json({ embedUrl: autoPlayUrl, endTime: video.end_time, startTime: video.start_time, vChannelId: video.channel_id});
    } catch (error) {
        console.error("Error fetching videos:", error);
        res.status(500).send('Internal Server Error');
    }
});

app.get('/videos', async (req, res) => {
    // This is a sample response. Modify as needed.
    res.json({ message: 'GET request to /videos is working!' });
});

app.use(express.static('public'));

async function startServer() {
    await connectToDatabase();
    app.listen(PORT, () => {
        console.log(`Server started on http://localhost:${PORT}`);
    });
}

startServer();

process.on('SIGINT', async () => {
    console.log('Shutting down server...');
    if (db) {
        await db.end();
    }
    process.exit(0);
});
